#summary Python Debugger component of PyTools plugin
#labels IDE

<wiki:toc max_depth="2" />

= Introduction =

This page contains detailed information about the PyDebugger component of the PyTools plugin. PyDebugger is a debugger based off of the same rpdb2 Python debugger that is used by Winpdb. This component contains a collection of various shelf windows and editor integration for debugging Python programs and scripts. See the sections below for an introduction to each part of the debugger.

----

= Configuration =

This section contains information specific to the configuration of the debugger, for [PyTools#General_Configuration general configuration] see the main PyTools page.

[http://editra-plugins.googlecode.com/svn/wiki/images/PyTools/pytools_config_debugger.png]

*Options*
  * Trap Unhandled Exceptions: (TODO - description)
  * Enable Synchrocity: (TODO - description)
  * Pause Before Fork:(TODO - description)
  * Fork into Child: (TODO - description)
  * Source Encoding: Set the encoding of the files being debugged
  * Escape non ascii characters for Execute/Evaluate

----

= !PyDebugger Components =

== !PyBreakPoint ==
PyBreakPoint is a Shelf window for displaying and managing breakpoints. The screenshot below shows the PyBreakPoint window and how the breakpoints are displayed in the editor.

[http://editra-plugins.googlecode.com/svn/wiki/images/PyTools/pydebug_breakpoint.png]

Breakpoints can be added to any line of code in the editor. There are Three ways to add a breakpoint to a line.
  # Click in the marker margin on the far left of the editor window. Clicking again will toggle the breakpoint off.
  # Right clicking on the line and selecting the Toggle Breakpoint option to toggle a breakpoint on the line.
  # Clicking the + button that is displayed on the breakpoint windows control bar will add a breakpoint to the line in the text buffer that the cursor is currently active on.

The remaining two buttons on the Shelf Windows control bar can be used to remove breakpoints. The - button will delete the breakpoint on the current line. The last button on the right can be used to delete all breakpoints in the list.

In addition to being able to add and delete breakpoints, breakpoints can also be disabled and re-enabled by clicking on the red breakpoint marker that is shown in the list.

Double clicking on a breakpoint will cause the cursor to jump to that point.

----

== !PyDebug ==

The !PyDebug Shelf window is the main control window for attaching to programs and stepping through the code. The screenshot below shows what the debug window looks like.

[http://editra-plugins.googlecode.com/svn/wiki/images/PyTools/pydebug_debugger.png]

*Actions* (from left to right)
  * Preferences Button - open the PyTools configuration dialog
  * Go Button - Start debugging the current script or tell the program that is already being debugged to run to the next breakpoint.
  * Stop Button - Abort the debug session
  * Step In Button - Step into the call on the current line
  * Step Over Button - Step over the current line
  * Step Out Button - Step out of the current scope
  * Break All Button - Break a the current point of execution
  * Program/Debugger Args Choice Control
  * Text Field - enter arguments to pass to the program or debugger based on selection in previous field.
  * Remote Button - Attach to an already running process

----

== !PyExpression ==

[http://editra-plugins.googlecode.com/svn/wiki/images/PyTools/pydebug_expression.png]

----

== !PyStackThread ==

The !PyStackThread Shelf window provides a view of the current execution stack and thread statuses of the program being debugged. The screenshot below shows this window in the Stack view.

[http://editra-plugins.googlecode.com/svn/wiki/images/PyTools/pydebug_stack.png]

*Views*

Using the vertical control bar on the left this window can display one of two views.

  * Stack - Shows the current execution stack
  * Threads - Shows the status of the running threads

*Actions*
  * Preferences Button - Opens the PyTools configuration dialog
  * Double clicking on an item in the stack list will jump to that point in the code.

----

== !PyVariable ==

The !PyVariable Shelf window provides a way to inspect the local and global variables that are present in the current debug context. In addition to this it also allows you to inspect any exceptions that may have been thrown by the debuggee.

[http://editra-plugins.googlecode.com/svn/wiki/images/PyTools/pydebug_variables.png]

*Views*

The control bar on the left contains buttons to activate one of the three possible views. Hovering over the button will show a tooltip describing the view but from top to bottom the views are.

  * locals()
  * globals()
  * Exceptions

*Actions*
  * Preferences - opens the PyTools configuration dialog
  * Filter - Set the verbosity of how much data is shown in each view
  * Analyze Exception